// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_get_user_followees is a generated GoMock package.
package mock_get_user_followees

import (
	model "aggregationframework/internal/model/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfollowConnector is a mock of followConnector interface.
type MockfollowConnector struct {
	ctrl     *gomock.Controller
	recorder *MockfollowConnectorMockRecorder
}

// MockfollowConnectorMockRecorder is the mock recorder for MockfollowConnector.
type MockfollowConnectorMockRecorder struct {
	mock *MockfollowConnector
}

// NewMockfollowConnector creates a new mock instance.
func NewMockfollowConnector(ctrl *gomock.Controller) *MockfollowConnector {
	mock := &MockfollowConnector{ctrl: ctrl}
	mock.recorder = &MockfollowConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfollowConnector) EXPECT() *MockfollowConnectorMockRecorder {
	return m.recorder
}

// GetUserFolloweeIds mocks base method.
func (m *MockfollowConnector) GetUserFolloweeIds(username, lastFolloweeId string, limit int) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFolloweeIds", username, lastFolloweeId, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserFolloweeIds indicates an expected call of GetUserFolloweeIds.
func (mr *MockfollowConnectorMockRecorder) GetUserFolloweeIds(username, lastFolloweeId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFolloweeIds", reflect.TypeOf((*MockfollowConnector)(nil).GetUserFolloweeIds), username, lastFolloweeId, limit)
}

// MockreadmodelsConnector is a mock of readmodelsConnector interface.
type MockreadmodelsConnector struct {
	ctrl     *gomock.Controller
	recorder *MockreadmodelsConnectorMockRecorder
}

// MockreadmodelsConnectorMockRecorder is the mock recorder for MockreadmodelsConnector.
type MockreadmodelsConnectorMockRecorder struct {
	mock *MockreadmodelsConnector
}

// NewMockreadmodelsConnector creates a new mock instance.
func NewMockreadmodelsConnector(ctrl *gomock.Controller) *MockreadmodelsConnector {
	mock := &MockreadmodelsConnector{ctrl: ctrl}
	mock.recorder = &MockreadmodelsConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreadmodelsConnector) EXPECT() *MockreadmodelsConnectorMockRecorder {
	return m.recorder
}

// GetFolloweesMetadata mocks base method.
func (m *MockreadmodelsConnector) GetFolloweesMetadata(username []string) ([]model.Followee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolloweesMetadata", username)
	ret0, _ := ret[0].([]model.Followee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolloweesMetadata indicates an expected call of GetFolloweesMetadata.
func (mr *MockreadmodelsConnectorMockRecorder) GetFolloweesMetadata(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolloweesMetadata", reflect.TypeOf((*MockreadmodelsConnector)(nil).GetFolloweesMetadata), username)
}
